import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';

/*
 * Dashboard page
 * Displays generated documents, tasks/case tracker and a log of legal aid contacts.
 * Users can view, download or delete documents, add tasks with due dates,
 * mark them complete and delete tasks. Contact log shows when each
 * organisation was contacted.
 */
const DashboardPage = () => {
  const [documents, setDocuments] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [title, setTitle] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [contactLog, setContactLog] = useState([]);

  // Load data from localStorage on mount
  useEffect(() => {
    const docs = JSON.parse(localStorage.getItem('legalbridge_documents') || '[]');
    setDocuments(docs);
    const tks = JSON.parse(localStorage.getItem('legalbridge_tasks') || '[]');
    setTasks(tks);
    const log = JSON.parse(localStorage.getItem('legalbridge_contact_log') || '[]');
    setContactLog(log);
  }, []);

  // Save tasks to localStorage whenever tasks change
  useEffect(() => {
    localStorage.setItem('legalbridge_tasks', JSON.stringify(tasks));
  }, [tasks]);

  const downloadDocument = (doc) => {
    const pdf = new jsPDF();
    let y = 20;
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('LegalBridge India', 15, y);
    y += 8;
    pdf.setFontSize(16);
    pdf.text(doc.title.split(' – ')[0].toUpperCase(), 15, y);
    y += 8;
    pdf.setFontSize(10);
    const dt = new Date(doc.createdAt || doc.id);
    pdf.text(`Generated on: ${dt.getDate()}/${dt.getMonth() + 1}/${dt.getFullYear()}`, 15, y);
    y += 10;
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    const bodyLines = pdf.splitTextToSize(doc.content, 180);
    pdf.text(bodyLines, 15, y);
    pdf.setFontSize(8);
    const h = pdf.internal.pageSize.height || pdf.internal.pageSize.getHeight();
    const disclaimer = 'Disclaimer: This document is generated by AI and should be reviewed by a legal professional.';
    const disclaimer2 = 'Generated by LegalBridge India - Free AI-Powered Legal Aid Platform';
    pdf.setTextColor(100);
    pdf.text(disclaimer, 15, h - 25);
    pdf.text(disclaimer2, 15, h - 19);
    const fileName = doc.title.replace(/\s+/g, '_') + '.pdf';
    pdf.save(fileName);
  };

  const deleteDocument = (id) => {
    if (!window.confirm('Delete this document?')) return;
    const newDocs = documents.filter((d) => d.id !== id);
    setDocuments(newDocs);
    localStorage.setItem('legalbridge_documents', JSON.stringify(newDocs));
  };

  const addTask = (e) => {
    e.preventDefault();
    if (!title.trim() || !dueDate) return;
    const newTask = {
      id: Date.now(),
      title: title.trim(),
      dueDate,
      completed: false
    };
    const newTasks = [...tasks, newTask];
    setTasks(newTasks);
    setTitle('');
    setDueDate('');
  };

  const toggleComplete = (taskId) => {
    const updated = tasks.map((t) => (t.id === taskId ? { ...t, completed: !t.completed } : t));
    setTasks(updated);
  };

  const deleteTask = (taskId) => {
    if (!window.confirm('Delete this task?')) return;
    const updated = tasks.filter((t) => t.id !== taskId);
    setTasks(updated);
  };

  return (
    <div className="dashboard-page">
      <h2 className="section-title" style={{ textAlign: 'center' }}>Your Dashboard</h2>
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '2rem', marginTop: '2rem' }}>
        {/* Documents section */}
        <section style={{ flex: '1 1 350px', backgroundColor: '#fff', border: '1px solid #e5e7eb', borderRadius: 'var(--radius)', padding: '1.5rem', boxShadow: 'var(--shadow)' }}>
          <h3 style={{ marginTop: 0, marginBottom: '1rem', color: 'var(--primary)', fontSize: '1.25rem' }}>Your Documents</h3>
          {documents.length === 0 ? (
            <p>You have not generated any documents yet.</p>
          ) : (
            documents.map((doc) => (
              <div key={doc.id} style={{ border: '1px solid #e5e7eb', borderRadius: 'var(--radius)', padding: '0.75rem 1rem', marginBottom: '0.75rem', backgroundColor: '#f9fafb' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <div>
                    <div style={{ fontWeight: 600 }}>{doc.title || doc.type}</div>
                    <div style={{ fontSize: '0.8rem', color: '#666' }}>Created: {new Date(doc.createdAt || doc.id).toLocaleDateString()}</div>
                  </div>
                  <div style={{ display: 'flex', gap: '0.4rem' }}>
                    <button onClick={() => downloadDocument(doc)} style={{ backgroundColor: 'var(--primary)', color: '#fff', border: 'none', borderRadius: 'var(--radius)', padding: '0.4rem 0.8rem', cursor: 'pointer' }}>Download</button>
                    <button onClick={() => deleteDocument(doc.id)} style={{ backgroundColor: '#fff', border: '1px solid var(--primary)', color: 'var(--primary)', borderRadius: 'var(--radius)', padding: '0.4rem 0.8rem', cursor: 'pointer' }}>Delete</button>
                  </div>
                </div>
              </div>
            ))
          )}
        </section>
        {/* Tasks / case tracker section */}
        <section style={{ flex: '1 1 350px', backgroundColor: '#fff', border: '1px solid #e5e7eb', borderRadius: 'var(--radius)', padding: '1.5rem', boxShadow: 'var(--shadow)' }}>
          <h3 style={{ marginTop: 0, marginBottom: '1rem', color: 'var(--primary)', fontSize: '1.25rem' }}>Case Tracker</h3>
          <form onSubmit={addTask} style={{ marginBottom: '1rem', display: 'grid', gap: '0.6rem' }}>
            <div style={{ display: 'flex', flexDirection: 'column' }}>
              <label htmlFor="task-title" style={{ marginBottom: '0.25rem', fontWeight: 500 }}>Task Title</label>
              <input id="task-title" value={title} onChange={(e) => setTitle(e.target.value)} required style={{ padding: '0.5rem 0.75rem', border: '1px solid #ccc', borderRadius: 'var(--radius)' }} />
            </div>
            <div style={{ display: 'flex', flexDirection: 'column' }}>
              <label htmlFor="task-date" style={{ marginBottom: '0.25rem', fontWeight: 500 }}>Due Date</label>
              <input id="task-date" type="date" value={dueDate} onChange={(e) => setDueDate(e.target.value)} required style={{ padding: '0.5rem 0.75rem', border: '1px solid #ccc', borderRadius: 'var(--radius)' }} />
            </div>
            <button type="submit" style={{ backgroundColor: 'var(--primary)', color: '#fff', border: 'none', borderRadius: 'var(--radius)', padding: '0.6rem 1.2rem', cursor: 'pointer' }}>Add Task</button>
          </form>
          {tasks.length === 0 ? (
            <p>No tasks added yet.</p>
          ) : (
            tasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)).map((task) => {
              const now = new Date();
              const due = new Date(task.dueDate);
              let bg = '#f9fafb';
              if (task.completed) bg = '#e0f7e9';
              else if (due < now) bg = '#fdecea';
              else {
                const diff = (due - now) / (1000 * 60 * 60 * 24);
                if (diff <= 3) bg = '#fff8e1';
              }
              return (
                <div key={task.id} style={{ backgroundColor: bg, border: '1px solid #e5e7eb', borderRadius: 'var(--radius)', padding: '0.6rem 0.9rem', marginBottom: '0.5rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <span style={{ fontWeight: 600, textDecoration: task.completed ? 'line-through' : 'none' }}>{task.title}</span>
                    <span style={{ fontSize: '0.8rem', color: '#666' }}>Due: {new Date(task.dueDate).toLocaleDateString()}</span>
                  </div>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.4rem' }}>
                    <input type="checkbox" checked={task.completed} onChange={() => toggleComplete(task.id)} />
                    <button onClick={() => deleteTask(task.id)} style={{ backgroundColor: 'transparent', border: 'none', color: 'var(--primary)', cursor: 'pointer', fontSize: '0.9rem' }}>Delete</button>
                  </div>
                </div>
              );
            })
          )}
        </section>
        {/* Contact log section */}
        <section style={{ flex: '1 1 100%', backgroundColor: '#fff', border: '1px solid #e5e7eb', borderRadius: 'var(--radius)', padding: '1.5rem', boxShadow: 'var(--shadow)' }}>
          <h3 style={{ marginTop: 0, marginBottom: '1rem', color: 'var(--primary)', fontSize: '1.25rem' }}>Legal Aid Contact Log</h3>
          {contactLog.length === 0 ? (
            <p>You haven’t contacted any legal aid organisations yet.</p>
          ) : (
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr>
                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '0.5rem 0.5rem' }}>Organisation</th>
                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '0.5rem 0.5rem' }}>Date</th>
                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '0.5rem 0.5rem' }}>Time</th>
                </tr>
              </thead>
              <tbody>
                {contactLog.map((entry, idx) => {
                  const d = new Date(entry.timestamp);
                  return (
                    <tr key={idx} style={{ borderBottom: '1px solid #eee' }}>
                      <td style={{ padding: '0.5rem' }}>{entry.org}</td>
                      <td style={{ padding: '0.5rem' }}>{d.toLocaleDateString()}</td>
                      <td style={{ padding: '0.5rem' }}>{d.toLocaleTimeString()}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          )}
        </section>
      </div>
    </div>
  );
};

export default DashboardPage;